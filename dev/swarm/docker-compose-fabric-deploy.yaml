version: '2.1'

networks:
  external_monitor_net:
    external:
      name: monitor_net

services:
  # 0.1
  ca0:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 500M
      restart_policy:
        condition: on-failure

  ca1:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 500M
      restart_policy:
        condition: on-failure
  
  # 0.15  
  zookeeper0:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  zookeeper1:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  zookeeper2:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure
  
  # 0.2
  kafka0:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  kafka1:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  kafka2:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  kafka3:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.05"
          memory: 1000M
      restart_policy:
        condition: on-failure

  #### 0.5
  orderer:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 2000M
      restart_policy:
        condition: on-failure

  peer0-org1:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 1500M
      restart_policy:
        condition: on-failure

  peer1-org1:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 1500M
      restart_policy:
        condition: on-failure

  peer0-org2:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 1500M
      restart_policy:
        condition: on-failure

  peer1-org2:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.1"
          memory: 1500M
      restart_policy:
        condition: on-failure
  
  configtxlator:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.025"
          memory: 500M
      restart_policy:
        condition: on-failure

  ccenv:
    networks:
      - external_monitor_net
    deploy:
      #replicas: 3
      resources:
        limits:
          cpus: "0.075"
          memory: 1000M
      restart_policy:
        condition: on-failure

  visualizer:
    networks:
      - external_monitor_net    
    deploy:
      placement:
        constraints: [node.role == manager]

      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

      resources:  
        limits:
          cpus: '0.05'
          memory: 500M
        reservations:
          cpus: '0.01'
          memory: 500M      